
# Imports
# =======


from os import path
import sys
import logging
from PyQt4 import QtGui, QtCore
from ..Base import ExoBase, MaterialShadow


#-----------------------------------------------------------------------------#

# Training Completion UI
# ======== ========== ==


class Eval(ExoBase):

    '''
    Page after training is complete. Can be used to:
        1. Evaluate model (build Visuals)
        2. Predict labels for new data.
        3. For unsupervised learning, save labels generated by algorithm.
    '''

    
    def __init__(self, parent, algotype, dataDir):
        super().__init__(parent)
        self.default = dataDir
        supervised = {
            'Clustering' : False,
            'Regression' : True,
            'Classification' : True
        }
        self.parent().stat.clearMessage()
        layout = self.createLayout(supervised[algotype])
        self.initUI(layout, supervised[algotype])
        
    
    def initUI(self, layout, supervised):
        '''
        Initialise UI for the evaluations page.
            1. Sets layout.
            2. Connects the clicked signals for evalBtn, predBtn, saveBtn,
               predBrowse.
        '''
        super().initUI(layout)
        self.evalBtn.clicked.connect(self.parent().buttonClicked)
        self.predBtn.clicked.connect(self.parent().buttonClicked)
        if not supervised:
            self.saveBtn.clicked.connect(self.parent().buttonClicked)
        self.predBrowse.clicked.connect(self.readPath)


    def createLayout(self, supervised):
        '''
        Creates layout to either evaluate model, predict new data or, if
        unsupervised learning, save labels.
            1. Initialises the layouts to visual and predict columns.
            2. If unsupervised learning, initialises the layout to save column.
        '''
        # Columns
        cards = []
        cards.append(self.visualColumn(supervised))
        cards.append(self.predictColumn())
        if not supervised:
            cards.append(self.saveColumn())

        return self.createCardLayout(*cards)


    def visualColumn(self, supervised):
        '''
        Creates the column for evaluating the model.
            1. To select data set in case of supervised learning,
                1. Creates a QComboBox to select data set.
        '''
        vboxEval = self.vboxCreate()
        if supervised:
            setLab = QtGui.QLabel('Use dataset')
            setLab.setObjectName('FormLabel')

            self.setCombo = QtGui.QComboBox(self)
            self.setCombo.addItem('Validating')
            self.setCombo.addItem('Testing')
            self.setCombo.addItem('Both')
            
            formSet = QtGui.QFormLayout()
            formSet.addRow(setLab, self.setCombo)
            formSet.setLabelAlignment(QtCore.Qt.AlignLeft)
            formSet.setVerticalSpacing(15)
            formSet.setHorizontalSpacing(15)

            vboxEval = self.vboxCreate(self.hcenter(formSet), 40,
                    vbox=vboxEval)

        self.evalBtn = QtGui.QPushButton('Evaluate')
        self.evalBtn.setFocusPolicy(QtCore.Qt.NoFocus)
        self.evalBtn.setGraphicsEffect(MaterialShadow(self))
        vboxEval = self.vboxCreate(self.hcenter(self.evalBtn), vbox=vboxEval)

        return self.createCard('Visualise Dataset Results on Model', vboxEval)


    def predictColumn(self):
        '''
        Creates the column to predict labels for new data.
            2. To select new data file,
                2. Creates a QLineEdit widget to enter file path.
                3. Creates a QPushButton to browse path to file.
            3. To set delimiter,
                2. Creates a QLineEdit to enter delimiter.
            4. To set headers,
                1. Creates a QComboBox with options 'Yes' and 'No'.
        '''
        predLab = QtGui.QLabel('New Data')
        predLab.setObjectName('FormLabel')
        self.predEdit = QtGui.QLineEdit(self.default)
        self.predBrowse = QtGui.QPushButton('Browse')
        self.predBrowse.setFocusPolicy(QtCore.Qt.NoFocus)
        self.predBrowse.setGraphicsEffect(MaterialShadow(self))
        hboxBrowse = self.hboxCreate(self.predEdit, 30, self.predBrowse)
        formFile = QtGui.QFormLayout()
        formFile.addRow(predLab, hboxBrowse)
        formFile.setVerticalSpacing(15)
        formFile.setHorizontalSpacing(25)
        hboxFile = self.hboxCreate(200, formFile, 200)

        delimLab = QtGui.QLabel('Delimiter')
        delimLab.setStatusTip('Set csv file delimiter.')
        delimLab.setObjectName('FormLabel')
        
        self.delimEdit = QtGui.QLineEdit(',')
        self.delimEdit.setStatusTip('Set csv file delimiter.')
        
        headLab = QtGui.QLabel('Headers')
        headLab.setStatusTip('Whether the csv file contains headers.')
        headLab.setObjectName('FormLabel')
        
        self.headCombo = QtGui.QComboBox()
        self.headCombo.addItem('No')
        self.headCombo.addItem('Yes')
        self.headCombo.setCurrentIndex(0)
        self.headCombo.setStatusTip('Whether the csv file contains headers.')

        formFileParams = QtGui.QFormLayout()
        formFileParams.addRow(headLab, self.headCombo)
        formFileParams.addRow(delimLab, self.delimEdit)
        formFileParams.setLabelAlignment(QtCore.Qt.AlignLeft)
        formFileParams.setVerticalSpacing(15)
        formFileParams.setHorizontalSpacing(25)
        hboxFileParams = self.hcenter(formFileParams)

        self.predBtn = QtGui.QPushButton('Predict')
        self.predBtn.setGraphicsEffect(MaterialShadow(self))
        self.predBtn.setFocusPolicy(QtCore.Qt.NoFocus)
        vboxPred = self.vboxCreate(hboxFile, 40, hboxFileParams, 40,
                self.hcenter(self.predBtn))
        return self.createCard('Predict Labels for New Data', vboxPred)
        

    def saveColumn(self):
        '''
        Creates a column containing a QPushButton for saving generated
        clusters. <Unsupervised learning>
        '''
        self.saveBtn = QtGui.QPushButton('Save')
        self.saveBtn.setGraphicsEffect(MaterialShadow(self))
        self.saveBtn.setFocusPolicy(QtCore.Qt.NoFocus)
        hboxSave = self.hcenter(self.saveBtn)
        return self.createCard('Save Labels Predicted for Data', hboxSave)


    def readPath(self):
        '''
        Functions as a slot to read file path when Browse button is
        clicked.
            1. Reads file path from a File Dialog.
            2. If file path is not empty, sets corresponding QLineEdit's text
               to file path.
            3. If file path is empty, sets corresponding QLineEdit's text to
               user's home directory.
        '''
        logging.info('Eval:predBrowse pressed')
        fname = QtGui.QFileDialog.getOpenFileName(self, 'Open Data File',
            self.predEdit.text(), filter='CSV (*.csv) | *.csv')
        if fname != '':
            self.predEdit.setText(fname)
        else:
            self.predEdit.setText(self.default)

        logging.info('Eval:' + fname)


    def checkVal(self):
        '''
        Called before moving to next window, validates user input.
            1. Checks if data file path is valid.
            2. Returns dict dataInfo that stores file path, and the header and
               delimiter setting.
        '''
        dataFile = self.predEdit.text()
        heads = [False, True]

        if not path.isfile(dataFile):
            self.parent().stat.showMessage("Enter valid path to data file")
            return None
        
        dataInfo = {
            'dataFile' : dataFile,
            'headers'  : heads[self.headCombo.currentIndex()],
            'delim'    : self.delimEdit.text()
        }
        
        return dataInfo


#-----------------------------------------------------------------------------#